from transformers import (
    TrOCRProcessor,
    VisionEncoderDecoderModel,
    AutoImageProcessor,
    AutoModelForImageClassification,
)
from PIL import Image
import torch

# ======================================================
# üß† 1Ô∏è‚É£ Initialisation des mod√®les
# ======================================================
print("üöÄ Initialisation des mod√®les d'authentification de documents...")

# --- OCR (lecture de texte depuis image ou PDF) ---
try:
    ocr_processor = TrOCRProcessor.from_pretrained("microsoft/trocr-base-printed")
    ocr_model = VisionEncoderDecoderModel.from_pretrained("microsoft/trocr-base-printed")
    print("‚úÖ OCR (TrOCR) pr√™t.")
except Exception as e:
    print("‚ùå Erreur chargement OCR:", e)
    ocr_processor, ocr_model = None, None

# --- D√©tection falsification IA (images g√©n√©r√©es ou truqu√©es) ---
try:
    forgery_processor = AutoImageProcessor.from_pretrained("umm-maybe/ai-image-detector")
    forgery_model = AutoModelForImageClassification.from_pretrained("umm-maybe/ai-image-detector")
    print("‚úÖ D√©tecteur d'images truqu√©es pr√™t.")
except Exception as e:
    print("‚ùå Erreur chargement du mod√®le de falsification:", e)
    forgery_processor, forgery_model = None, None


# ======================================================
# üìñ 2Ô∏è‚É£ OCR : Extraction du texte
# ======================================================
def extract_text_from_image(image_path: str) -> str:
    if not ocr_model:
        return "Erreur: mod√®le OCR non initialis√©."
    try:
        image = Image.open(image_path).convert("RGB")
        pixel_values = ocr_processor(images=image, return_tensors="pt").pixel_values
        generated_ids = ocr_model.generate(pixel_values)
        text = ocr_processor.batch_decode(generated_ids, skip_special_tokens=True)[0]
        return text.strip()
    except Exception as e:
        return f"Erreur OCR: {e}"


# ======================================================
# üîç 3Ô∏è‚É£ V√©rification texte OCR vs texte du CV
# ======================================================
def verify_certificate_text(cv_text: str, ocr_text: str):
    keywords = ["aws", "google", "ibm", "coursera", "microsoft", "udemy", "oracle", "linkedin"]
    matches = [k for k in keywords if k in ocr_text.lower() and k in cv_text.lower()]
    is_consistent = len(matches) > 0

    return {
        "matched_keywords": matches,
        "is_consistent": is_consistent,
        "verdict": "‚úÖ Document coh√©rent avec le CV" if is_consistent else "üö® Document douteux ou incoh√©rent",
    }


# ======================================================
# üß† 4Ô∏è‚É£ D√©tection d‚Äôimages falsifi√©es / g√©n√©r√©es par IA
# ======================================================
def detect_forgery(image_path: str):
    if not forgery_model:
        return {"error": "Mod√®le de falsification non initialis√©"}

    try:
        image = Image.open(image_path).convert("RGB")
        inputs = forgery_processor(images=image, return_tensors="pt")

        with torch.no_grad():
            outputs = forgery_model(**inputs)
            logits = outputs.logits
            predicted_class = logits.argmax(-1).item()
            score = torch.softmax(logits, dim=-1)[0][predicted_class].item()

        labels = forgery_model.config.id2label
        label = labels[predicted_class]

        return {
            "label": label,
            "confidence": round(score * 100, 2),
            "verdict": (
                "üö® Document probablement falsifi√© / g√©n√©r√© par IA"
                if "fake" in label.lower()
                else "‚úÖ Document authentique"
            ),
        }
    except Exception as e:
        return {"error": str(e)}


# ======================================================
# üîó 5Ô∏è‚É£ Pipeline complet (OCR + v√©rification + IA)
# ======================================================
def analyze_document_authenticity(cv_text: str, doc_path: str):
    ocr_text = extract_text_from_image(doc_path)
    text_verif = verify_certificate_text(cv_text, ocr_text)
    image_verif = detect_forgery(doc_path)

    return {
        "ocr_text": ocr_text,
        "text_verification": text_verif,
        "image_verification": image_verif,
    }