# similarity_check.py
from sentence_transformers import SentenceTransformer, util
import torch

# ======================================================
# üß† Chargement du mod√®le d'embeddings (pr√©-entra√Æn√©)
# ======================================================
try:
    print("üöÄ Chargement du mod√®le de similarit√© (MiniLM)...")
    model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
    print("‚úÖ Mod√®le de similarit√© pr√™t !")
except Exception as e:
    print("‚ùå Erreur lors du chargement du mod√®le MiniLM :", e)
    model = None


# ======================================================
# üîç Fonction de comparaison de deux CV
# ======================================================
def compare_cvs(cv_text_1: str, cv_text_2: str):
   
    if not model:
        return {"error": "Mod√®le non initialis√©"}

    try:
        emb1 = model.encode(cv_text_1, convert_to_tensor=True)
        emb2 = model.encode(cv_text_2, convert_to_tensor=True)

        similarity = util.cos_sim(emb1, emb2).item()

        if similarity > 0.9:
            verdict = "üö® CV potentiellement copi√© ou g√©n√©r√© automatiquement."
            status = "suspicious"
        elif similarity > 0.75:
            verdict = "‚ö†Ô∏è CV fortement inspir√© d'un mod√®le existant."
            status = "partially_similar"
        else:
            verdict = "‚úÖ CV original et unique."
            status = "authentic"

        return {
            "similarity_score": round(similarity, 3),
            "verdict": verdict,
            "status": status
        }

    except Exception as e:
        return {"error": str(e)}